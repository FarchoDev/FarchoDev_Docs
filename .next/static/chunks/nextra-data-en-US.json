{"/":{"title":"Index","data":{"":"","bienvenido-a-farchodev-docs-#Bienvenido a FarchoDev Docs 🌟":"","tu-punto-de-partida-en-el-mundo-de-la-programación#Tu punto de partida en el mundo de la programación":"En FarchoDev Docs, nuestra misión es proporcionarte recursos prácticos y concisos para aprender y dominar las habilidades de programación. Ya seas un principiante explorando los fundamentos o un profesional buscando referencias avanzadas, aquí encontrarás:\nLenguajes de programación populares como Python, JavaScript, C++, y más.\nFrameworks modernos para desarrollo web, móvil, y backend.\nÁreas clave de la programación como bases de datos, inteligencia artificial, DevOps, diseño de interfaces y mucho más.","qué-encontrarás-aquí#¿Qué encontrarás aquí?":"📚 Documentación bien estructurada para facilitar tu aprendizaje.\n💡 Ejemplos prácticos y casos de uso que te ayudan a aplicar tus conocimientos en proyectos reales.\n🚀 Tutoriales paso a paso que te guiarán desde lo básico hasta lo avanzado.","nuestro-enfoque#Nuestro enfoque":"Nos enfocamos en hacer la programación accesible y eficiente para todos:\nSin rodeos: contenido directo al grano.\nActualizado: información relevante para las tecnologías de hoy.\nComunitario: un espacio para que crezcas como desarrollador y colabores con otros programadores.","comienza-tu-viaje-ahora#¡Comienza tu viaje ahora!":"Navega por nuestras secciones, explora los temas que te interesan y comienza a crear el futuro con código."}},"/cursos/conventional-commits/modulo-2":{"title":"Módulo 2: Conventional Commits en la Práctica","data":{"":"En este módulo, vamos a profundizar en cómo aplicar Conventional Commits en tu día a día como desarrollador y cómo integrar estas prácticas en tu flujo de trabajo.","configuración-de-tu-editor-de-código-visual-studio#Configuración de tu editor de código (Visual Studio)":"Para facilitar la escritura de mensajes de commit convencionales, podemos configurar nuestro editor de código para que nos brinde asistencia. En Visual Studio, existen varias extensiones que pueden ayudarte:\nConventional Commits: Esta extensión te proporciona un menú interactivo para seleccionar el tipo de commit, el scope y escribir el mensaje.\nGitLens: Aunque no está diseñada específicamente para Conventional Commits, GitLens ofrece una gran cantidad de funcionalidades para trabajar con Git, incluyendo la visualización del historial de commits y la comparación de archivos.","pasos-básicos-para-configurar-visual-studio#Pasos básicos para configurar Visual Studio":"Instalar la extensión: Busca la extensión \"Conventional Commits\" en el marketplace de Visual Studio Code y añádela a tus extensiones.\nConfigurar preferencias (opcional): Algunas extensiones te permiten personalizar la apariencia y el comportamiento, como el conjunto de tipos de commit disponibles.\n\nEjemplo de uso:Al momento de realizar un commit, la extensión te mostrará un menú donde podrás seleccionar el tipo de commit, el scope y escribir el mensaje. Esto te ayudará a mantener una estructura consistente en tus commits.","integración-con-github#Integración con GitHub":"GitHub ofrece una gran cantidad de herramientas que se pueden integrar con Conventional Commits para automatizar tareas y mejorar la colaboración. Algunas de estas herramientas incluyen:\nAcciones de GitHub: Puedes crear workflows personalizados para automatizar la generación de changelogs, la creación de releases y otras tareas.\nEtiquetas: GitHub te permite crear etiquetas basadas en los tipos de commit, lo que facilita la identificación de releases y el seguimiento de cambios.\nProtección de ramas: Puedes configurar tu repositorio para requerir que los commits cumplan con ciertas reglas antes de fusionarlos en una rama protegida.","conventional-commits-y-semver#Conventional Commits y SemVer":"Semantic Versioning (SemVer) es un esquema de versionado de software que utiliza números de versión para indicar los cambios realizados en una biblioteca o aplicación. Conventional Commits se alinea perfectamente con SemVer, ya que los tipos de commit permiten determinar automáticamente el incremento de la versión:\nMajor version: Se incrementa cuando se introducen cambios que rompen la compatibilidad hacia atrás (breaking changes).\nMinor version: Se incrementa cuando se añaden nuevas funcionalidades que mantienen la compatibilidad hacia atrás.\nPatch version: Se incrementa cuando se corrigen errores sin introducir nuevas funcionalidades o cambios que rompan la compatibilidad.","mejores-prácticas#Mejores prácticas":"Ser conciso: Los mensajes de commit deben ser claros y concisos, pero lo suficientemente detallados para explicar el cambio realizado.\nUtilizar el tiempo presente: Escribe los mensajes de commit como si estuvieras dando una instrucción (ej: \"Add new feature\").\nEvitar los puntos finales: No es necesario utilizar puntos al final de los mensajes.\nUtilizar el scope de manera efectiva: El scope te permite especificar el área del código afectada por el cambio, lo que facilita la búsqueda de commits relacionados.\nIncluir información relevante en el footer: Si es necesario, puedes incluir información adicional en el footer, como números de issues o enlaces a documentación.\n\nEn el próximo módulo, exploraremos casos de uso más avanzados de Conventional Commits y cómo aplicar estas prácticas en equipos de desarrollo."}}}